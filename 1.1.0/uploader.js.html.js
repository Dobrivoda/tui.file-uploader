tui.util.defineNamespace("fedoc.content", {});
fedoc.content["uploader.js.html"] = "      <div id=\"main\" class=\"main\">\n\n\n\n    \n    <section>\n        <article>\n            <pre class=\"prettyprint source linenums\"><code>/**\n * @fileoverview FileUploader is core of file uploader component.&lt;br>FileManager manage connector to connect server and update FileListView.\n * @dependency ne-code-snippet 1.0.3, jquery1.8.3\n * @author NHN Ent. FE Development Team &lt;dl_javascript@nhnent.com>\n */\n'use strict';\nvar consts = require('./consts');\nvar utils = require('./utils');\nvar Form = require('./view/form');\nvar List = require('./view/list');\nvar DragAndDrop = require('./view/drag');\nvar OldRequester = require('./requester/old');\nvar ModernRequester = require('./requester/modern');\n\nvar REQUESTER_TYPE_MODERN = consts.CONF.REQUESTER_TYPE_MODERN;\n/**\n * FileUploader act like bridge between connector and view.\n * It makes connector and view with option and environment.\n * It control and make connection among modules.\n * @constructor\n * @param {object} options The options to set up file uploader modules.\n *  @param {object} options.url The url is file server.\n *      @param {string} options.url.send The url is for file attach.\n *      @param {string} options.url.remove The url is for file detach.\n *  @param {string} options.formTarget The target for x-domain jsonp case.\n *  @param {object} options.listInfo The element info to display file list information.\n *  @param {string} [options.fileField='userFile[]'] The field name of input file element.\n *  @param {boolean} options.useFolder Whether select unit is folder of not. If this is ture, multiple will be ignored.\n *  @param {boolean} options.isMultiple Whether enable multiple select or not.\n * @param {jQuery} $el Root Element of Uploader\n * @example\n * var uploader = new tui.component.Uploader({\n *     url: {\n *         send: \"http://fe.nhnent.com/etc/etc/uploader/uploader.php\",\n *         remove: \"http://fe.nhnent.com/etc/etc/uploader/remove.php\"\n *     },\n *     listInfo: {\n *         list: $('#files'),\n *         count: $('#file_count'),\n *         size: $('#size_count')\n *     }\n * }, $('#uploader'));\n */\nvar Uploader = tui.util.defineClass(/**@lends Uploader.prototype */{/*eslint-disable*/\n    init: function(options, $el) {/*eslint-enable*/\n        /**\n         * Uploader element\n         * @type {jQuery}\n         */\n        this.$el = $el;\n\n        /**\n         * Send/Remove url\n         * @type {{send: string, remove: string}}\n         */\n        this.url = options.url;\n\n        /**\n         * Redirect URL for CORS(response, IE7)\n         * @type {string}\n         */\n        this.redirectURL = options.redirectURL;\n\n        /**\n         * Form target name for CORS (IE7, 8, 9)\n         * @type {string}\n         */\n        this.formTarget = consts.CONF.FORM_TARGET_NAME;\n\n        /**\n         * Target frame for CORS (IE7, 8, 9)\n         * @type {jQuery}\n         */\n        this.$targetFrame = this._createTargetFrame()\n            .appendTo(this.$el);\n\n        /**\n         * Input file - field name\n         * @type {string}\n         */\n        this.fileField = options.fileField || consts.CONF.FILE_FILED_NAME;\n\n        /**\n         * Whether the uploader uses batch-transfer\n         * @type {boolean}\n         */\n        this.isBatchTransfer = !!(options.isBatchTransfer);\n\n        /**\n         * Whether the sending/removing urls are x-domain.\n         * @type {boolean}\n         */\n        this.isCrossDomain = utils.isCrossDomain(this.url.send);\n\n        /**\n         * Whether the browser supports PostMessage API\n         * @type {boolean}\n         */\n        this.isSupportPostMessage = !!(tui.util.pick(this.$targetFrame, '0', 'contentWindow', 'postMessage'));\n\n        /**\n         * Whether the user uses multiple upload\n         * @type {boolean}\n         */\n        this.isMultiple = !!(options.isMultiple);\n\n        /**\n         * Whether the user uses drag&amp;drop upload\n         * @type {boolean}\n         */\n        this.useDrag = !!(options.useDrag);\n\n        /**\n         * Whether the user uses folder upload\n         * @type {boolean}\n         */\n        this.useFolder = !!(options.useFolder);\n\n        if (this.useDrag &amp;&amp; !this.useFolder &amp;&amp; utils.isSupportFileSystem()) {\n            /**\n             * Drag &amp; Drop View\n             * @type {DragAndDrop}\n             */\n            this.dragView = new DragAndDrop(this);\n        }\n\n        /**\n         * From View\n         * @type {Form}\n         */\n        this.formView = new Form(this);\n\n        /**\n         * List View\n         * @type {List}\n         */\n        this.listView = new List(options.listInfo);\n\n        this._setRequester();\n        this._addEvent();\n        if (this.isCrossDomain &amp;&amp; this.isSupportPostMessage) {\n            this._setPostMessageEvent();\n        }\n    },\n\n    /**\n     * Set Connector\n     * @private\n     */\n    _setRequester: function() {\n        if (utils.isSupportFormData()) {\n            this._requester = new ModernRequester(this);\n        } else {\n            this._requester = new OldRequester(this);\n        }\n    },\n\n    /**\n     * Set post-message event if supported and needed\n     * @private\n     */\n    _setPostMessageEvent: function() {\n        this.$targetFrame.off('load');\n        $(window).on('message', $.proxy(function(event) {\n            var originalEvent = event.originalEvent,\n                data;\n\n            if (this.url.send.indexOf(originalEvent.origin) === -1) {\n                return;\n            }\n            data = $.parseJSON(originalEvent.data);\n\n            if (this.isBatchTransfer) {\n                this.clear();\n            } else {\n                this.updateList(data.filelist);\n            }\n            /**\n             * Success event\n             *  in IE8, 9 - using PostMessageAPI for CORS\n             * @api\n             * @event Uploader#success\n             * @param {object} data - Server response data\n             *  @param {Array} data.filelist - Uploaded file list\n             *  @param {number} [data.success] - Uploaded file count\n             *  @param {number} [data.failed] - Failed file count\n             *  @param {number} [data.count] - Total count\n             */\n            this.fire('success', data);\n        }, this));\n    },\n\n    /**\n     * Make target frame to be target of form element.\n     * @returns {jQuery} Target frame: jquery-element\n     * @private\n     */\n    _createTargetFrame: function() {\n        var $target = $('&lt;iframe name=\"' + this.formTarget + '\">&lt;/iframe>');\n        $target.css({\n            visibility: 'hidden',\n            position: 'absolute'\n        });\n\n        return $target;\n    },\n\n    /**\n     * Add events to views and fire uploader events\n     * @private\n     */\n    _addEvent: function() {\n        this.listView.on('remove', this.removeFile, this);\n        if (this.isBatchTransfer) {\n            this._addEventWhenBatchTransfer();\n        } else {\n            this._addEventWhenNormalTransfer();\n        }\n    },\n\n    /**\n     * Add event when uploader uses batch-transfer\n     * @private\n     */\n    _addEventWhenBatchTransfer: function() {\n        this.formView.on({\n            change: this.store,\n            submit: this.submit\n        }, this);\n\n        this._requester.on({\n            removed: function(data) {\n                this.updateList(data);\n                /**\n                 * Remove event\n                 *  in batchTransfer\n                 * @api\n                 * @event Uploader#remove\n                 * @param {object} data - Remove data from this component\n                 *  @param {string} data.message - 'success' or 'fail'\n                 *  @param {string} data.name - file name\n                 *  @param {string} data.id - file id\n                 */\n                this.fire('remove', data);\n            },\n            error: function(data) {\n                /**\n                 * Error event\n                 *  in batchTransfer\n                 * @api\n                 * @event Uploader#error\n                 * @param {Error} data - Error data\n                 *  @param {string} data.status - Error status\n                 *  @param {string} data.message - Error message\n                 */\n                this.fire('error', data);\n            },\n            uploaded: function(data) {\n                this.clear();\n                /**\n                 * Success event\n                 *  in batchTransfer\n                 * @api\n                 * @event Uploader#success\n                 * @param {object} data - Server response data\n                 *  @param {Array} data.filelist - Uploaded file list\n                 *  @param {number} [data.success] - Uploaded file count\n                 *  @param {number} [data.failed] - Failed file count\n                 *  @param {number} [data.count] - Total count\n                 */\n                this.fire('success', data);\n            },\n            stored: function(data) {\n                this.updateList(data);\n                /**\n                 * Update event\n                 *  in batchTransfer\n                 * @api\n                 * @event Uploader#update\n                 * @param {Array.&lt;object>} data - File list data\n                 * Array having objects&lt;br>{id: string, name: string, size: number}\n                 */\n                this.fire('update', data);\n            }\n        }, this);\n\n        if (this.useDrag &amp;&amp; this.dragView) {\n            this.dragView.on('drop', this.store, this);\n        }\n    },\n\n    /**\n     * Add event when uploader uses normal-transfer\n     * @private\n     */\n    _addEventWhenNormalTransfer: function() {\n        this.formView.on('change', this.sendFile, this);\n\n        this._requester.on({\n            removed: function(data) {\n                this.updateList(data);\n                /**\n                 * Remove event\n                 *  in normalTransfer\n                 * @api\n                 * @event Uploader#remove\n                 * @param {object} data - Remove data from server response\n                 *  @param {string} data.message - 'success' or 'fail'\n                 *  @param {string} data.name - file name\n                 *  @param {string} data.id - file id\n                 */\n                this.fire('remove', data);\n            },\n            error: function(data) {\n                /**\n                 * Error event\n                 *  in normalTransfer\n                 * @api\n                 * @event Uploader#error\n                 * @param {Error} data - Error data\n                 *  @param {string} data.status - Error status\n                 *  @param {string} data.message - Error message\n                 */\n                this.fire('error', data);\n            },\n            uploaded: function(data) {\n                this.updateList(data.filelist);\n                /**\n                 * Success event\n                 *  in normalTransfer\n                 * @api\n                 * @event Uploader#success\n                 * @param {object} data - Server response data\n                 *  @param {Array} data.filelist - Uploaded file list\n                 *  @param {number} [data.success] - Uploaded file count\n                 *  @param {number} [data.failed] - Failed file count\n                 *  @param {number} [data.count] - Total count\n                 */\n                this.fire('success', data);\n            }\n        }, this);\n\n        if (this.useDrag &amp;&amp; this.dragView) {\n            this.dragView.on('drop', function(files) {\n                this.store(files);\n                this.submit();\n            }, this);\n        }\n    },\n\n    /**\n     * Update list view with custom or original data.\n     * @param {object} [info] The data for update list\n     */\n    updateList: function(info) {\n        this.listView.update(info);\n        if (this.isBatchTransfer) {\n            this.listView.updateTotalInfo(info);\n        } else {\n            this.listView.updateTotalInfo();\n        }\n    },\n\n    /**\n     * Callback for custom send event\n     * @param {Event} [event] - Form submit event\n     */\n    sendFile: function(event) {\n        this.store();\n        this.submit(event);\n    },\n\n    /**\n     * Callback for custom remove event\n     * @param {object} data The data for remove file.\n     */\n    removeFile: function(data) {\n        this._requester.remove(data);\n    },\n\n    /**\n     * Submit for data submit to server\n     * @param {Event} [event] - Form submit event\n     */\n    submit: function(event) {\n        if (event &amp;&amp; this._requester.TYPE === REQUESTER_TYPE_MODERN) {\n            event.preventDefault();\n        }\n        this._requester.upload();\n    },\n\n    /**\n     * Clear uploader\n     */\n    clear: function() {\n        this._requester.clear();\n        this.formView.clear();\n        this.listView.clear();\n    },\n\n    /**\n     * Store input element to pool.\n     * @param {Array.&lt;File> | File} [files] - A file or files\n     */\n    store: function(files) {\n        this._requester.store(files);\n    }\n});\n\ntui.util.CustomEvents.mixin(Uploader);\nmodule.exports = Uploader;\n</code></pre>\n        </article>\n    </section>\n\n\n\n</div>\n\n"