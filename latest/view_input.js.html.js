tui.util.defineNamespace("fedoc.content", {});
fedoc.content["view_input.js.html"] = "      <div id=\"main\" class=\"main\">\n\n\n\n    \n    <section>\n        <article>\n            <pre class=\"prettyprint source linenums\"><code>/**\n * @fileoverview InputView make input form by template. Add event file upload event.\n * @dependency ne-code-snippet 1.0.3, jquery1.8.3\n * @author NHN Ent. FE Development Team &lt;dl_javascript@nhnent.com>\n */\n'use strict';\nvar consts = require('../consts');\nvar utils = require('../utils');\n\n/**\n * This view control input element typed file.\n * @constructor View.InputView\n */\nvar Input = tui.util.defineClass(/**@lends View.Input.prototype **/{\n    /**\n     * Initialize input element.\n     * @param {object} [options]\n     */\n    init: function(options, uploader) {\n\n        this._uploader = uploader;\n        this._target = options.formTarget;\n        this._url = options.url;\n        this._isBatchTransfer = options.isBatchTransfer;\n        this._isMultiple = !!(utils.isSupportFormData() &amp;&amp; options.isMultiple);\n        this._useFolder = !!(utils.isSupportFormData() &amp;&amp; options.useFolder);\n\n        this._html = this._setHTML(options.template);\n\n        this._render();\n        this._renderHiddenElements();\n\n        if (options.helper) {\n            this._makeBridgeInfoElement(options.helper);\n        }\n\n        this._addEvent();\n    },\n\n    /**\n     * Render input area\n     * @private\n     */\n    _render: function() {\n        this.$el = $(this._getHtml());\n        this.$el.attr({\n            action: this._url.send,\n            method: 'post',\n            enctype: \"multipart/form-data\",\n            target: (!this._isBatchTransfer ? this._target : '')\n        });\n        this.$input = this._getInputElement();\n        this.$submit = this._getSubmitElement();\n        this.$input.appendTo(this.$el);\n        if (this.$submit) {\n            this.$submit.appendTo(this.$el);\n        }\n        this._uploader.$el.append(this.$el);\n    },\n\n    /**\n     * Set all of input elements html strings.\n     * @param {object} [template] The template is set form customer.\n     * @return {object} The html string set for inputView\n     */\n    _setHTML: function(template) {\n        if (!template) {\n            template = {};\n        }\n\n        return {\n            input: template.input || consts.HTML.input,\n            submit: template.submit || consts.HTML.submit,\n            form: template.form || consts.HTML.form\n        }\n    },\n    /**\n     * Get html string from template\n     * @return {object}\n     * @private\n     */\n    _getHtml: function() {\n        return this._html.form;\n    },\n\n    /**\n     * Makes and returns jquery element\n     * @return {object} The jquery object wrapping original input element\n     */\n    _getInputElement: function() {\n        var map = {\n            multiple: this._isMultiple ? 'multiple' : '',\n            fileField: this._uploader.fileField,\n            webkitdirectory: this._useFolder ? 'webkitdirectory' : ''\n        };\n\n        return $(utils.template(map, this._html.input));\n    },\n\n    /**\n     * Makes and returns jquery element\n     * @return {object} The jquery object wrapping sumbit button element\n     */\n    _getSubmitElement: function() {\n        if (this._isBatchTransfer) {\n            return $(this._html.submit);\n        } else {\n            return false;\n        }\n    },\n\n    /**\n     * Call methods those make each hidden element.\n     * @private\n     */\n    _renderHiddenElements: function() {\n        this._makeTargetFrame();\n        this._makeResultTypeElement();\n        this._makeCallbackElement();\n    },\n\n    /**\n     * Add event\n     * @private\n     */\n    _addEvent: function() {\n        if (this._isBatchTransfer) {\n            if (utils.isSupportFormData()) {\n                this.$el.on('submit', tui.util.bind(function (event) {\n                    event.preventDefault();\n                    this._uploader.submit();\n                }, this));\n            } else {\n                this.$el.on('submit', tui.util.bind(function () {\n                    this._uploader.submit();\n                }, this));\n            }\n        }\n        this._addInputEvent();\n    },\n\n    /**\n     * Add input element change event by sending type\n     * @private\n     */\n    _addInputEvent: function() {\n        if (this._isBatchTransfer) {\n            this.$input.on('change', tui.util.bind(this.onSave, this));\n        } else {\n            this.$input.on('change', tui.util.bind(this.onChange, this));\n        }\n    },\n\n    /**\n     * Event-Handle for input element change\n     */\n    onChange: function() {\n        if (!this.$input[0].value) {\n            return;\n        }\n        this.fire('change', {\n            target: this\n        });\n    },\n\n    /**\n     * Event-Handle for save input element\n     */\n    onSave: function() {\n        if (!this.$input[0].value) {\n            return;\n        }\n        var saveCallback = !utils.isSupportFormData() ? tui.util.bind(this._resetInputElement, this) : null;\n        this.fire('save', {\n            element: this.$input[0],\n            callback: saveCallback\n        });\n    },\n\n    /**\n     * Reset Input element to save whole input=file element.\n     */\n    _resetInputElement: function() {\n        this.$input.off();\n        this._clone(this.$input[0]);\n        this.$input = this._getInputElement();\n        if (this.$submit) {\n            this.$submit.before(this.$input);\n        } else {\n            this.$el.append(this.$input);\n        }\n        this._addInputEvent();\n    },\n\n    /**\n     * Makes element to be target of submit form element.\n     * @private\n     */\n    _makeTargetFrame: function() {\n        this._$target = $('&lt;iframe name=\"' + this._target + '\">&lt;/iframe>');\n        this._$target.css({\n            visibility: 'hidden',\n            position: 'absolute'\n        });\n        this._uploader.$el.append(this._$target);\n    },\n\n    /**\n     * Make element to be callback function name\n     * @private\n     */\n    _makeCallbackElement: function() {\n        this._$callback = this._makeHiddenElement({\n            'name': consts.CONF.JSONPCALLBACK_NAME,\n            'value': this._uploader.callbackName\n        });\n        this.$el.append(this._$callback);\n    },\n\n    /**\n     * Makes element to know which type request\n     * @private\n     */\n    _makeResultTypeElement: function() {\n        this._$resType = this._makeHiddenElement({\n            'name' : this._uploader.resultTypeElementName || consts.CONF.RESPONSE_TYPE,\n            'value': this._uploader.type\n        });\n        this.$el.append(this._$resType);\n    },\n\n    /**\n     * Make element that has redirect page information used by Server side.\n     * @param {object} helper Redirection information for clear x-domain problem.\n     * @private\n     */\n    _makeBridgeInfoElement: function(helper) {\n        this._$helper = this._makeHiddenElement({\n            'name' : helper.name || consts.CONF.REDIRECT_URL,\n            'value': helper.url\n        });\n        this.$el.append(this._$helper);\n    },\n\n    /**\n     * Make hidden input element with options\n     * @param {object} options The opitons to be attribute of input\n     * @returns {*|jQuery}\n     * @private\n     */\n    _makeHiddenElement: function(options) {\n        tui.util.extend(options, {\n            type: 'hidden'\n        });\n        return $('&lt;input />').attr(options);\n    },\n\n    /**\n     * Ask uploader to save input element to pool\n     * @param {HTMLElement} input A input element[type=file] for store pool\n     */\n    _clone: function(input) {\n        input.file_name = input.value;\n        this._uploader.store(input);\n    }\n\n});\n\ntui.util.CustomEvents.mixin(Input);\n\nmodule.exports = Input;\n</code></pre>\n        </article>\n    </section>\n\n\n\n</div>\n\n"