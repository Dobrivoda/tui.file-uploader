tui.util.defineNamespace("fedoc.content", {});
fedoc.content["uploader.js.html"] = "      <div id=\"main\" class=\"main\">\n\n\n\n    \n    <section>\n        <article>\n            <pre class=\"prettyprint source linenums\"><code>/**\n * @fileoverview FileUploader is core of file uploader component.&lt;br>FileManager manage connector to connect server and update FileListView.\n * @dependency ne-code-snippet 1.0.3, jquery1.8.3\n * @author NHN Ent. FE Development Team &lt;dl_javascript@nhnent.com>\n */\n'use strict';\nvar consts = require('./consts');\nvar utils = require('./utils');\nvar conn = require('./connector/connector');\nvar Input = require('./view/input');\nvar List = require('./view/list');\nvar Pool = require('./view/pool');\nvar DragAndDrop = require('./view/drag');\n\n/**\n * FileUploader act like bridge between connector and view.\n * It makes connector and view with option and environment.\n * It control and make connection among modules.\n * @constructor\n * @param {object} options The options to set up file uploader modules.\n *  @param {object} options.url The url is file server.\n *      @param {string} options.url.send The url is for file attach.\n *      @param {string} options.url.remove The url is for file detach.\n *  @param {object} options.helper The helper object info is for x-domain.\n *      @param {string} options.helper.url The url is helper page url.\n *      @param {string} options.helper.name The name of hidden element for sending server helper page information.\n *  @param {string} options.resultTypeElementName The type of hidden element for sending server response type information.\n *  @param {string} options.formTarget The target for x-domain jsonp case.\n *  @param {string} options.callbackName The name of jsonp callback function.\n *  @param {object} options.listInfo The element info to display file list information.\n *  @param {string} options.separator The separator for jsonp helper response.\n *  @param {string} [options.fileField=userFile] The field name of input file element.\n *  @param {boolean} options.useFolder Whether select unit is folder of not. If this is ture, multiple will be ignored.\n *  @param {boolean} options.isMultiple Whether enable multiple select or not.\n * @param {jQuery} $el Root Element of Uploader\n * @example\n * var uploader = new tui.component.Uploader({\n *     url: {\n *         send: \"http://fe.nhnent.com/etc/etc/uploader/uploader.php\",\n *         remove: \"http://fe.nhnent.com/etc/etc/uploader/remove.php\"\n *     },\n *     helper: {\n *         url: 'http://10.77.34.126:8009/samples/response.html',\n *         name: 'REDIRECT_URL'\n *     },\n *     resultTypeElementName: 'RESPONSE_TYPE',\n *     formTarget: 'hiddenFrame',\n *     callbackName: 'responseCallback',\n *     listInfo: {\n *         list: $('#files'),\n *         count: $('#file_count'),\n *         size: $('#size_count')\n *     },\n *     separator: ';'\n * }, $('#uploader'));\n */\nvar Uploader = tui.util.defineClass(/**@lends Uploader.prototype */{\n    /**\n     * initialize\n     */\n    init: function(options, $el) {\n        this._setData(options);\n        this._setConnector();\n\n        this.$el = $el;\n\n        if(this.useDrag &amp;&amp; !this.useFolder &amp;&amp; utils.isSupportFileSystem()) {\n            this.dragView = new DragAndDrop(options, this);\n        }\n\n        this.inputView = new Input(options, this);\n        this.listView = new List(options, this);\n\n        this.fileField = this.fileField || consts.CONF.FILE_FILED_NAME;\n        this._pool = new Pool(this.inputView.$el[0]);\n        this._addEvent();\n    },\n\n    /**\n     * Set Connector\n     * @private\n     */\n    _setConnector: function() {\n        if (this.isBatchTransfer) {\n            this.type = 'local';\n        } else if (this.isCrossDomain()) {\n            if (this.helper) {\n                this.type = 'jsonp';\n            } else {\n                alert(consts.CONF.ERROR.NOT_SURPPORT);\n                this.type = 'local';\n            }\n        } else {\n            if (this.useJsonp || !utils.isSupportFormData()) {\n                this.type = 'jsonp';\n            } else {\n                this.type = 'ajax';\n            }\n        }\n        this._connector = conn.getConnector(this);\n    },\n\n    /**\n     * Update list view with custom or original data.\n     * @param {object} info The data for update list\n     *  @param {string} info.action The action name to execute method\n     */\n    notify: function(info) {\n        this.listView.update(info);\n        this.listView.updateTotalInfo(info);\n    },\n\n    /**\n     * Set field data by option values.\n     * @param options\n     * @private\n     */\n    _setData: function(options) {\n        tui.util.extend(this, options);\n    },\n\n    /**\n     * Extract protocol + domain from url to find out whether cross-domain or not.\n     * @returns {boolean}\n     */\n    isCrossDomain: function() {\n        var pageDomain = document.domain;\n        return this.url.send.indexOf(pageDomain) === -1;\n    },\n\n    /**\n     * Callback for error\n     * @param {object} response Error response\n     */\n    errorCallback: function(response) {\n        var message;\n        if (response &amp;&amp; response.msg) {\n            message = response.msg;\n        } else {\n            message = consts.CONF.ERROR.DEFAULT;\n        }\n        alert(message);\n    },\n\n    /**\n     * Callback for custom send event\n     * @param {object} [data] The data include callback function for file clone\n     */\n    sendFile: function(data) {\n        var callback = tui.util.bind(this.notify, this),\n            files = data &amp;&amp; data.files;\n\n        this._connector.addRequest({\n            type: 'add',\n            success: function(result) {\n                if (data &amp;&amp; data.callback) {\n                    data.callback(result);\n                }\n                callback(result);\n            },\n            error: this.errorCallback\n        }, files);\n    },\n\n    /**\n     * Callback for custom remove event\n     * @param {object} data The data for remove file.\n     */\n    removeFile: function(data) {\n        var callback = tui.util.bind(this.notify, this);\n        this._connector.removeRequest({\n            type: 'remove',\n            data: data,\n            success: callback\n        });\n    },\n\n    /**\n     * Submit for data submit to server\n     * @api\n     */\n    submit: function() {\n        if (this._connector.submit) {\n            if (utils.isSupportFormData()) {\n                this._connector.submit(tui.util.bind(function() {\n                    /**\n                     * @api\n                     * @event Uploader#batchSuccess\n                     * @param {Uploader} uploader - uploader instance\n                     */\n                    this.fire('batchSuccess', this);\n                }, this));\n            } else {\n                this._pool.plant();\n            }\n        }\n    },\n\n    /**\n     * Get file info locally\n     * @param {HtmlElement} element Input element\n     * @private\n     */\n    _getFileInfo: function(element) {\n        var files;\n        if (utils.isSupportFileSystem()) {\n            files = this._getFileList(element.files);\n        } else {\n            files = {\n                name: element.value,\n                id: element.value\n            };\n        }\n        return files;\n    },\n\n    /**\n     * Get file list from FileList object\n     * @param {FileList} files A FileList object\n     * @returns {Array}\n     * @private\n     */\n    _getFileList: function(files) {\n        return tui.util.map(files, function(file) {\n            return {\n                name: file.name,\n                size: file.size,\n                id: file.name\n            };\n        });\n    },\n\n    /**\n     * Add event to listview and inputview\n     * @private\n     */\n    _addEvent: function() {\n        var self = this;\n\n        if(this.useDrag &amp;&amp; this.dragView) {\n            // @todo top 처리가 따로 필요함, sendFile 사용 안됨\n            this.dragView.on('drop', this.sendFile, this);\n        }\n        if (this.isBatchTransfer) {\n            this.inputView.on('save', this.sendFile, this);\n            this.listView.on('remove', this.removeFile, this);\n        } else {\n            this.inputView.on('change', this.sendFile, this);\n            this.listView.on('remove', this.removeFile, this);\n        }\n\n        /**\n         * Custom Events\n         * @api\n         * @event Uploader#fileAdded\n         * @param {object} target - Target item information\n         */\n        this.listView.on('fileAdded', function(target) {\n            self.fire(target);\n        });\n\n        /**\n         * Custom Events\n         * @api\n         * @event Uploader#fileRemoved\n         * @param {object} name - The file name to remove\n         */\n        this.listView.on('fileRemoved', function(name) {\n            self.fire(name);\n        });\n    },\n\n    /**\n     * Store input element to pool.\n     * @param {HTMLElement} input A input element[type=file] for store pool\n     */\n    store: function(input) {\n        this._pool.store(input);\n    },\n\n    /**\n     * Remove input element form pool.\n     * @param {string} name The file name to remove\n     */\n    remove: function(name) {\n        if (!utils.isSupportFormData()) {\n            this._pool.remove(name);\n        }\n    }\n});\n\ntui.util.CustomEvents.mixin(Uploader);\nmodule.exports = Uploader;\n</code></pre>\n        </article>\n    </section>\n\n\n\n</div>\n\n"