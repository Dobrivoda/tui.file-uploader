tui.util.defineNamespace("fedoc.content", {});
fedoc.content["connector_jsonp.js.html"] = "      <div id=\"main\" class=\"main\">\n\n\n\n    \n    <section>\n        <article>\n            <pre class=\"prettyprint source linenums\"><code>/**\n * @fileoverview This Connector make connection between FileManager and file server api at old browser.&lt;br>\n *     This Connector use hidden iframe.\n * @dependency ne-code-snippet 1.0.3, jquery1.8.3\n * @author NHN Ent. FE Development Team &lt;dl_javascript@nhnent.com>\n */\n'use strict';\n/**\n * The modules will be mixed in connector by type.\n * @namespace Connector.Jsonp\n */\nvar Jsonp = {/** @lends Connector.Jsonp.prototype */\n    /**\n     * Request by form submit.\n     * @param {object} config Configuration for submit form.\n     *  @param {function} config.success Callback when post submit complate.\n     * @memberof Connector.Jsonp\n     */\n    addRequest: function(config) {\n        var callbackName = this._uploader.callbackName,\n            callback = config.success;\n\n        tui.util.defineNamespace(callbackName,  tui.util.bind(this.successPadding, this, callback));\n        this._uploader.inputView.$el.submit();\n    },\n\n    /**\n     * Preprocessing response before callback run.\n     * @param {function} callback Request Callback function\n     * @param {object} response Response from server\n     * @memberof Connector.Jsonp\n     */\n    successPadding: function(callback, response) {\n        var result = {};\n\n        if (this._uploader.isCrossDomain()) {\n            result.items = this._getSplitItems(response);\n        } else {\n            result.items = tui.util.toArray(response.filelist);\n        }\n\n        callback(result);\n    },\n\n    /**\n     * Make query data to array\n     * @param {object} data The Data extracted from querystring separated by '&amp;'\n     * @private\n     * @memberof Connector.Jsonp\n     */\n    _getSplitItems: function(data) {\n        var sep = this._uploader.separator,\n            status = data.status.split(sep),\n            names = data.names.split(sep),\n            sizes = data.sizes.split(sep),\n            ids = tui.util.isString(data.ids) ? data.ids.split(sep) : names,\n            items = [];\n\n        tui.util.forEach(status, function(item, index) {\n            if (item === 'success') {\n                var nItem = {\n                    name: names[index],\n                    status: status[index],\n                    size: sizes[index],\n                    id: ids[index]\n                };\n                items.push(nItem);\n            }\n        });\n        return items;\n    },\n\n    /**\n     * Request ajax by config to remove file.\n     * @param {object} config\n     * @memberof Connector.Jsonp\n     */\n    removeRequest: function(config) {\n        var callbackName = this._uploader.callbackName,\n            data = {\n                callback: callbackName\n            },\n            callback = config.success;\n\n        tui.util.defineNamespace(callbackName, tui.util.bind(this.removePadding, this, callback), true);\n\n        $.ajax({\n            url: this._uploader.url.remove,\n            dataType: 'jsonp',\n            jsonp: callbackName,\n            data: tui.util.extend(data, config.data)\n        });\n\n    },\n\n    /**\n     * Preprocessing response before callback run.\n     * @param {function} callback Request Callback function\n     * @param {object} response Response from server\n     * @memberof Connector.Jsonp\n     */\n    removePadding: function(callback, response) {\n        var result = {};\n        result.action = 'remove';\n        result.name = decodeURIComponent(response.name);\n\n        callback(result);\n    }\n};\n\nmodule.exports = Jsonp;\n</code></pre>\n        </article>\n    </section>\n\n\n\n</div>\n\n"