tui.util.defineNamespace("fedoc.content", {});
fedoc.content["uploader.js.html"] = "      <div id=\"main\" class=\"main\">\n\n\n\n    \n    <section>\n        <article>\n            <pre class=\"prettyprint source linenums\"><code>/**\n * @fileoverview FileUploader is core of file uploader component.&lt;br>FileManager manage connector to connect server and update FileListView.\n * @dependency ne-code-snippet 1.0.3, jquery1.8.3\n * @author NHN Ent. FE Development Team &lt;dl_javascript@nhnent.com>\n */\n\nvar statics = require('./statics');\nvar utils = require('./utils');\nvar conn = require('./connector/connector');\nvar Input = require('./view/input');\nvar List = require('./view/list');\nvar Pool = require('./view/pool');\nvar DragAndDrop = require('./view/drag');\n\n/**\n * FileUploader act like bridge between connector and view.\n * It makes connector and view with option and environment.\n * It control and make connection among modules.\n * @constructor\n * @param {object} options The options to set up file uploader modules.\n *  @param {object} options.url The url is file server.\n *      @param {string} options.url.send The url is for file attach.\n *      @param {string} options.url.remove The url is for file detach.\n *  @param {object} options.helper The helper object info is for x-domain.\n *      @param {string} options.helper.url The url is helper page url.\n *      @param {string} options.helper.name The name of hidden element for sending server helper page information.\n *  @param {string} options.resultTypeElementName The type of hidden element for sending server response type information.\n *  @param {string} options.formTarget The target for x-domain jsonp case.\n *  @param {string} options.callbackName The name of jsonp callback function.\n *  @param {object} options.listInfo The element info to display file list information.\n *  @param {string} options.separator The separator for jsonp helper response.\n *  @param {string} [options.fileField=userFile] The field name of input file element.\n *  @param {boolean} options.useFolder Whether select unit is folder of not. If this is ture, multiple will be ignored.\n *  @param {boolean} options.isMultiple Whether enable multiple select or not.\n * @param {jQuery} $el Root Element of Uploader\n * @example\n * var uploader = new tui.component.Uploader({\n *     url: {\n *         send: \"http://fe.nhnent.com/etc/etc/uploader/uploader.php\",\n *         remove: \"http://fe.nhnent.com/etc/etc/uploader/remove.php\"\n *     },\n *     helper: {\n *         url: 'http://10.77.34.126:8009/samples/response.html',\n *         name: 'REDIRECT_URL'\n *     },\n *     resultTypeElementName: 'RESPONSE_TYPE',\n *     formTarget: 'hiddenFrame',\n *     callbackName: 'responseCallback',\n *     listInfo: {\n *         list: $('#files'),\n *         count: $('#file_count'),\n *         size: $('#size_count')\n *     },\n *     separator: ';'\n * }, $('#uploader'));\n */\nvar Uploader = tui.util.defineClass(/**@lends Uploader.prototype */{\n\n\t/**\n\t * initialize\n\t */\n\tinit: function(options, $el) {\n\t\tthis._setData(options);\n\t\tthis._setConnector();\n\n\t\tthis.$el = $el;\n\n\t\tif(this.useDrag &amp;&amp; !this.useFolder &amp;&amp; utils.isSupportFileSystem()) {\n\t\t\tthis.dragView = new DragAndDrop(options, this);\n\t\t}\n\n\t\tthis.inputView = new Input(options, this);\n\t\tthis.listView = new List(options, this);\n\n\t\tthis.fileField = this.fileField || statics.CONF.FILE_FILED_NAME;\n\t\tthis._pool = new Pool(this.inputView.$el[0]);\n\t\tthis._addEvent();\n\t},\n\t\n\t/**\n\t * Set Connector by useJsonp flag and whether.\n\t * @private\n\t */\n\t_setConnector: function() {\n\t\tif (this.isBatchTransfer) {\n\t\t\tthis.type = 'local';\n\t\t} else if (this.isCrossDomain()) {\n\t\t\tif (this.helper) {\n\t\t\t\tthis.type = 'jsonp';\n\t\t\t} else {\n\t\t\t\talert(statics.CONF.ERROR.NOT_SURPPORT);\n                this.type = 'local';    \n\t\t\t}\n\t\t} else {\n\t\t\tif (this.useJsonp || !utils.isSupportFormData()) {\n\t\t\t\tthis.type = 'jsonp';\n\t\t\t} else {\n\t\t\t\tthis.type = 'ajax';\n\t\t\t}\n\t\t}\n\t\tthis._connector = conn.getConnector(this);\n\t},\n\n\t/**\n\t * Update list view with custom or original data.\n\t * @param {object} info The data for update list\n\t *  @param {string} info.action The action name to execute method\n\t */\n\tnotify: function(info) {\n\t\tthis.listView.update(info);\n\t\tthis.listView.updateTotalInfo(info);\n\t},\n\n\t/**\n\t * Set field data by option values.\n\t * @param options\n\t * @private\n     */\n\t_setData: function(options) {\n\t\ttui.util.extend(this, options);\n\t},\n\n\t/**\n\t * Extract protocol + domain from url to find out whether cross-domain or not.\n\t * @returns {boolean}\n\t */\n\tisCrossDomain: function() {\n\t\tvar pageDomain = document.domain;\n\t\treturn this.url.send.indexOf(pageDomain) === -1;\n\t},\n\n\t/**\n\t * Callback for error\n\t * @param {object} response Error response\n\t */\n\terrorCallback: function(response) {\n\t\tvar message;\n\t\tif (response &amp;&amp; response.msg) {\n\t\t\tmessage = response.msg;\n\t\t} else {\n\t\t\tmessage = statics.CONF.ERROR.DEFAULT;\n\t\t}\n\t\talert(message);\n\t},\n\n\t/**\n\t * Callback for custom send event\n\t * @param {object} [data] The data include callback function for file clone\n\t */\n\tsendFile: function(data) {\n\t\tvar callback = tui.util.bind(this.notify, this),\n\t\tfiles = data &amp;&amp; data.files;\n\t\t\n\t\tthis._connector.addRequest({\n\t\t\ttype: 'add',\n\t\t\tsuccess: function(result) {\n\t\t\t\tif (data &amp;&amp; data.callback) {\n\t\t\t\t\tdata.callback(result);\n\t\t\t\t}\n\t\t\t\tcallback(result);\n\t\t\t},\n\t\t\terror: this.errorCallback\n\t\t}, files);\n\t},\n\n\t/**\n\t * Callback for custom remove event\n\t * @param {object} data The data for remove file.\n\t */\n\tremoveFile: function(data) {\n\t\tvar callback = tui.util.bind(this.notify, this);\n\t\tthis._connector.removeRequest({\n\t\t\ttype: 'remove',\n\t\t\tdata: data,\n\t\t\tsuccess: callback\n\t\t});\n\t},\n\n\t/**\n\t * Submit for data submit to server\n     * @api\n\t */\n\tsubmit: function() {\n\t\tif (this._connector.submit) {\n\t\t\tif (utils.isSupportFormData()) {\n\t\t\t\tthis._connector.submit(tui.util.bind(function() {\n\t\t\t\t\t/**\n\t\t\t\t\t * @api\n\t\t\t\t\t * @event Uploader#beforesubmit\n                     * @param {Uploader} uploader - uploader instance\n\t\t\t\t\t */\n\t\t\t\t\tthis.fire('beforesubmit', this);\n\t\t\t\t}, this));\n\t\t\t} else {\n\t\t\t\tthis._pool.plant();\n\t\t\t}\n\t\t} \n\t},\n\n\t/**\n\t * Get file info locally\n\t * @param {HtmlElement} element Input element\n\t * @private\n\t */\n\t_getFileInfo: function(element) {\n\t\tvar files;\n\t\tif (utils.isSupportFileSystem()) {\n\t\t\tfiles = this._getFileList(element.files);\n\t\t} else {\n\t\t\tfiles = {\n\t\t\t\tname: element.value,\n\t\t\t\tid: element.value\n\t\t\t};\n\t\t}\n\t\treturn files;\n\t},\n\n\t/**\n\t * Get file list from FileList object\n\t * @param {FileList} files A FileList object\n\t * @returns {Array}\n\t * @private\n\t */\n\t_getFileList: function(files) {\n\t\treturn tui.util.map(files, function(file) {\n\t\t\treturn {\n\t\t\t\tname: file.name,\n\t\t\t\tsize: file.size,\n\t\t\t\tid: file.name\n\t\t\t};\n\t\t});\n\t},\n\n\t/**\n\t * Add event to listview and inputview\n\t * @private\n\t */\n\t_addEvent: function() {\n        var self = this;\n\n\t\tif(this.useDrag &amp;&amp; this.dragView) {\n\t\t\t// @todo top 처리가 따로 필요함, sendFile 사용 안됨\n\t\t\tthis.dragView.on('drop', this.sendFile, this);\n\t\t}\n\t\tif (this.isBatchTransfer) {\n\t\t\tthis.inputView.on('save', this.sendFile, this);\n\t\t\tthis.listView.on('remove', this.removeFile, this);\n\t\t} else {\n\t\t\tthis.inputView.on('change', this.sendFile, this);\n\t\t\tthis.listView.on('remove', this.removeFile, this);\n\t\t}\n\n        /**\n         * Custom Events\n         * @api\n         * @event Uploader#fileAdded\n         * @param {object} target - Target item information\n         */\n        this.listView.on('fileAdded', function(target) {\n            self.fire(target);\n        });\n\n        /**\n         * Custom Events\n         * @api\n         * @event Uploader#fileRemoved\n         * @param {object} name - The file name to remove\n         */\n        this.listView.on('fileRemoved', function(name) {\n            self.fire(name);\n        });\n\t},\n\n\t/**\n\t * Store input element to pool.\n\t * @param {HTMLElement} input A input element[type=file] for store pool\n\t */\n\tstore: function(input) {\n\t\tthis._pool.store(input);\n\t},\n\n\t/**\n\t * Remove input element form pool.\n\t * @param {string} name The file name to remove\n\t */\n\tremove: function(name) {\n\t\tif (!utils.isSupportFormData()) {\n\t\t\tthis._pool.remove(name);\n\t\t}\n\t}\n});\n\ntui.util.CustomEvents.mixin(Uploader);\nmodule.exports = Uploader;\n</code></pre>\n        </article>\n    </section>\n\n\n\n</div>\n\n"