tui.util.defineNamespace("fedoc.content", {});
fedoc.content["view_input.js.html"] = "      <div id=\"main\" class=\"main\">\n\n\n\n    \n    <section>\n        <article>\n            <pre class=\"prettyprint source linenums\"><code>/**\n * @fileoverview InputView make input form by template. Add event file upload event.\n * @dependency ne-code-snippet 1.0.3, jquery1.8.3\n * @author NHN Ent. FE Development Team &lt;dl_javascript@nhnent.com>\n */\n\nvar statics = require('../statics');\nvar utils = require('../utils');\n\n/**\n * This view control input element typed file.\n * @constructor View.InputView\n */\nvar Input = tui.util.defineClass(/**@lends View.Input.prototype **/{\n\t/**\n\t * Initialize input element.\n\t * @param {object} [options]\n\t */\n\tinit: function(options, uploader) {\n\n\t\tthis._uploader = uploader;\n\t\tthis._target = options.formTarget;\n\t\tthis._url = options.url;\n\t\tthis._isBatchTransfer = options.isBatchTransfer;\n\t\tthis._isMultiple = !!(utils.isSupportFormData() &amp;&amp; options.isMultiple);\n\t\tthis._useFolder = !!(utils.isSupportFormData() &amp;&amp; options.useFolder);\n\n\t\tthis._html = this._setHTML(options.template);\n\n\t\tthis._render();\n\t\tthis._renderHiddenElements();\n\n\t\tif (options.helper) {\n\t\t\tthis._makeBridgeInfoElement(options.helper);\n\t\t}\n\n\t\tthis._addEvent();\n\t},\n\n\t/**\n\t * Render input area\n\t * @private\n\t */\n\t_render: function() {\n\t\tthis.$el = $(this._getHtml());\n\t\tthis.$el.attr({\n\t\t\taction: this._url.send,\n\t\t\tmethod: 'post',\n\t\t\tenctype: \"multipart/form-data\",\n\t\t\ttarget: (!this._isBatchTransfer ? this._target : '')\n\t\t});\n\t\tthis.$input = this._getInputElement();\n\t\tthis.$submit = this._getSubmitElement();\n\t\tthis.$input.appendTo(this.$el);\n\t\tif (this.$submit) {\n\t\t\tthis.$submit.appendTo(this.$el);\n\t\t}\n\t\tthis._uploader.$el.append(this.$el);\n\t},\n\n\t/**\n\t * Set all of input elements html strings.\n\t * @param {object} [template] The template is set form customer.\n\t * @return {object} The html string set for inputView\n\t */\n\t_setHTML: function(template) {\n\t\tif (!template) {\n\t\t\ttemplate = {};\n\t\t}\n\n\t\treturn {\n\t\t\tinput: template.input || statics.HTML.input,\n\t\t\tsubmit: template.submit || statics.HTML.submit,\n\t\t\tform: template.form || statics.HTML.form\n\t\t}\n\t},\n\t/**\n\t * Get html string from template\n\t * @return {object}\n\t * @private\n\t */\n\t_getHtml: function() {\n\t\treturn this._html.form;\n\t},\n\n\t/**\n\t * Makes and returns jquery element\n\t * @return {object} The jquery object wrapping original input element\n\t */\n\t_getInputElement: function() {\n\t\tvar map = {\n\t\t\tmultiple: this._isMultiple ? 'multiple' : '',\n\t\t\tfileField: this._uploader.fileField,\n\t\t\twebkitdirectory: this._useFolder ? 'webkitdirectory' : ''\n\t\t};\n\n\t\treturn $(utils.template(map, this._html.input));\n\t},\n\n\t/**\n\t * Makes and returns jquery element\n\t * @return {object} The jquery object wrapping sumbit button element\n\t */\n\t_getSubmitElement: function() {\n\t\tif (this._isBatchTransfer) {\n\t\t\treturn $(this._html.submit);\n\t\t} else {\n\t\t\treturn false;\t\n\t\t}\n\t},\n\n\t/**\n\t * Call methods those make each hidden element.\n\t * @private\n\t */\n\t_renderHiddenElements: function() {\n\t\tthis._makeTargetFrame();\n\t\tthis._makeResultTypeElement();\n\t\tthis._makeCallbackElement();\n\t},\n\n\t/**\n\t * Add event\n\t * @private\n\t */\n\t_addEvent: function() {\n\t\tif (this._isBatchTransfer) {\n\t\t\tthis.$el.on('submit', tui.util.bind(function() {\n\t\t\t\tthis._uploader.submit();\n\t\t\t}, this));\n\t\t}\n\t\tthis._addInputEvent();\n\t},\n\n\t/**\n\t * Add input element change event by sending type\n\t * @private\n\t */\n\t_addInputEvent: function() {\n\t\tif (this._isBatchTransfer) {\n\t\t\tthis.$input.on('change', tui.util.bind(this.onSave, this));\n\t\t} else {\n\t\t\tthis.$input.on('change', tui.util.bind(this.onChange, this));\n\t\t}\n\t},\n\n\t/**\n\t * Event-Handle for input element change\n\t */\n\tonChange: function() {\n\t\tif (!this.$input[0].value) {\n            return; \n        }\n        this.fire('change', {\n\t\t\ttarget: this\n\t\t});\n\t},\n\n\t/**\n\t * Event-Handle for save input element\n\t */\n\tonSave: function() {\n\t\tif (!this.$input[0].value) {\n            return;\n        }\n        var saveCallback = !utils.isSupportFormData() ? tui.util.bind(this._resetInputElement, this) : null;\n\t\tthis.fire('save', {\n\t\t\telement: this.$input[0],\n\t\t\tcallback: saveCallback\n\t\t});\n\t},\n\n\t/**\n\t * Reset Input element to save whole input=file element.\n\t */\n\t_resetInputElement: function() {\n\t\tthis.$input.off();\n\t\tthis._clone(this.$input[0]);\n\t\tthis.$input = this._getInputElement();\n\t\tif (this.$submit) {\n\t\t\tthis.$submit.before(this.$input);\n\t\t} else {\n\t\t\tthis.$el.append(this.$input);\n\t\t}\n\t\tthis._addInputEvent();\n\t},\n\n\t/**\n\t * Makes element to be target of submit form element.\n\t * @private\n\t */\n\t_makeTargetFrame: function() {\n\t\tthis._$target = $('&lt;iframe name=\"' + this._target + '\">&lt;/iframe>');\n\t\tthis._$target.css({\n\t\t\tvisibility: 'hidden',\n\t\t\tposition: 'absolute'\n\t\t});\n\t\tthis._uploader.$el.append(this._$target);\n\t},\n\n\t/**\n\t * Make element to be callback function name\n\t * @private\n\t */\n\t_makeCallbackElement: function() {\n\t\tthis._$callback = this._makeHiddenElement({\n\t\t\t'name': statics.CONF.JSONPCALLBACK_NAME,\n\t\t\t'value': this._uploader.callbackName\n\t\t});\n\t\tthis.$el.append(this._$callback);\n\t},\n\n\t/**\n\t * Makes element to know which type request\n\t * @private\n\t */\n\t_makeResultTypeElement: function() {\n\t\tthis._$resType = this._makeHiddenElement({\n\t\t\t'name' : this._uploader.resultTypeElementName || statics.CONF.RESPONSE_TYPE,\n\t\t\t'value': this._uploader.type\n\t\t});\n\t\tthis.$el.append(this._$resType);\n\t},\n\n\t/**\n\t * Make element that has redirect page information used by Server side.\n\t * @param {object} helper Redirection information for clear x-domain problem.\n\t * @private\n\t */\n\t_makeBridgeInfoElement: function(helper) {\n\t\tthis._$helper = this._makeHiddenElement({\n\t\t\t'name' : helper.name || statics.CONF.REDIRECT_URL,\n\t\t\t'value': helper.url\n\t\t});\n\t\tthis.$el.append(this._$helper);\n\t},\n\n\t/**\n\t * Make hidden input element with options\n\t * @param {object} options The opitons to be attribute of input\n\t * @returns {*|jQuery}\n\t * @private\n     */\t\n\t_makeHiddenElement: function(options) {\n\t\ttui.util.extend(options, {\n\t\t\ttype: 'hidden'\n\t\t});\n\t\treturn $('&lt;input />').attr(options);\n\t},\n\n\t/**\n\t * Ask uploader to save input element to pool\n\t * @param {HTMLElement} input A input element[type=file] for store pool\n\t */\n\t_clone: function(input) {\n\t\tinput.file_name = input.value;\n\t\tthis._uploader.store(input);\n\t}\n\n});\n\ntui.util.CustomEvents.mixin(Input);\n\nmodule.exports = Input;\n</code></pre>\n        </article>\n    </section>\n\n\n\n</div>\n\n"