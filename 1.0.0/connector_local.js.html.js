tui.util.defineNamespace("fedoc.content", {});
fedoc.content["connector_local.js.html"] = "      <div id=\"main\" class=\"main\">\n\n\n\n    \n    <section>\n        <article>\n            <pre class=\"prettyprint source linenums\"><code>/**\n * @fileoveview This Connector make connection between Uploader and html5 file api.\n * @author NHN Ent. FE Development Team &lt;dl_javascript@nhnent.com>\n */\nvar utils = require('../utils');\n\n/**\n * The modules will be mixed in connector by type.\n * @namespace Connector.Local\n */\nvar Local = {/** @lends Connector.Local.prototype */\n    /**\n     * A result array to save file to send.\n     */\n    _result : null,\n    /**\n     * Add Request, save files to array.\n     * @param {object} data The data of connection for server\n\t\t * @param {object} [files] The files to save\n     * @memberof Connector.Local\n     */\n    addRequest: function(data, files) {\n        var isValidPool = utils.isSupportFormData(),\n            result = this._saveFile(isValidPool, files);\n        data.success({\n            items: result\n        });\n    },\n\n    /**\n     * Save file to pool\n     * @param {boolean} isSupportAjax Whether FormData is supported or not\n\t\t * @param {object} [files] The files to save\n     * @private\n     * @memberof Connector.Local\n     */\n    _saveFile: function(isSupportAjax, files) {\n        var uploader = this._uploader,\n            inputView = uploader.inputView,\n            fileEl = inputView.$input[0],\n\t\t\t\t\t\tresult = [];\n\n        if (!this._result) {\n            this._result = [];\n        }\n\n        if (isSupportAjax) {\n            files = files || fileEl.files;\n            tui.util.forEach(files, function(item) {\n                if (tui.util.isObject(item)) {\n                    result.push(item);\n                }\n            }, this);\n        } else {\n            result.push({\n                name: fileEl.value,\n                element: fileEl\n            });\n        }\n\n\t\tthis._result = this._result.concat(result);\n        return result;\n    },\n\n    /**\n     * Makes form data to send POST(FormDate supported case)\n     * @returns {*}\n     * @private\n     * @memberof Connector.Local\n     */\n    _makeFormData: function() {\n        var uploader = this._uploader,\n\t\tfield = uploader.fileField,\n\t\tinput = uploader.inputView,\n\t\tform = new window.FormData(this._extractForm(input));\n\n        tui.util.forEach(this._result, function(item) {\n            form.append(field, item);\n        });\n        return form;\n    },\n\n\t/**\n\t * Extracts Form from inputView\n\t * @param {object} input The input view for extracting \n     * @memberof Connector.Local\n     * @private\n     */\n\t_extractForm: function(input) {\n\tvar form = input.$el.clone();\n\t\t// append to pool\n\t\treturn form[0];\n\t},\n\n    /**\n     * Remove file form result array\n     * @param {object} info The information set to remove file\n     * @memberof Connector.Local\n     */\n    removeRequest: function(info) {\n        var data = info.data;\n        this._result = tui.util.filter(this._result, function(el) {\n            return el.name !== data.filename;\n        });\n\n        info.success({\n            action: 'remove',\n            name: data.filename\n        });\n    },\n\n    /**\n     * Send files in a batch.\n     * @param callback\n     * @memberof Connector.Local\n     */\n    submit: function(callback) {\n        var form = this._makeFormData(inputView);\n        $.ajax({\n            url: this._uploader.url.send,\n            type: 'POST',\n            data: form,\n            success: callback,\n            processData: false,\n            contentType: false\n        });\n    }\n};\n\nmodule.exports = Local;\n</code></pre>\n        </article>\n    </section>\n\n\n\n</div>\n\n"